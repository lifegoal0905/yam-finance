CLI_DIR=$(dirname "$(pwd)/$BASH_SOURCE")
source $CLI_DIR/cli.config


## Example how to batch delete storage account blob
alias ockam.example.delete-blob="echo 'az storage blob delete-batch --account-name \$ACCOUNT_NAME --account-key \$ACCOUNT_KEY --source \$web'"

## Example how to batch upload to storage account blob
alias ockam.example.upload-blob="echo 'az storage blob upload-batch --account-name \$ACCOUNT_NAME --account-key \$ACCOUNT_KEY --source ./public/  --destination \"https://\$ACCOUNT_NAME.blob.core.windows.net/<CONTAINER_NAME>\"'"

function _ockam_usage() {
  echo 'usage: ockam <environment> <command>'
}

function _error_msg() {
  echo "Ockam: $1"
}

function _error_no_workspace() {
  _ockam_usage
  _error_msg "No workspace supplied"

  _check_command terraform > /dev/null
  cd $OCKAM_REPO_DIR/terraform && \
  terraform workspace list | tail -n+2; # show all except DEFAULT workspace
  cd - > /dev/null
}

# Check do we have particular command(s)
function _check_command() {
  EXIT_CODE=0
  for TOOL in $@
  do
    command -v $TOOL > /dev/null
    if [ $? -gt 0 ]
    then
      echo "$TOOL: missing"
      EXIT_CODE=1
    else
      echo "$TOOL: OK"
    fi
  done

  return $EXIT_CODE;
}

function ockam() {
  ockam.help
}

## Prints this help page
function ockam.help() {
  HELP=$(sed -En '/^[[:space:]]*##/,/(^[[:space:]]*function|^alias)/p' $CLI_DIR/ockam.aliases | sed -E 's/^[[:space:]]+//')

  echo "Ockam helper commands"
  while ! [ -z "$HELP" ]; do
    # Find the line number of the first command (above them there can be only
    # comments describing it)
    LINE=$(echo "$HELP" | grep --color=never -Enm 1 '^(function|alias)' | cut -d: -f1)

    # Get one command-description block
    BLOCK=$(echo "$HELP" | sed -n "1,${LINE}p")

    # Delete last command-description block
    HELP=$(echo "$HELP" | sed -e "1,${LINE}d")

    # Get command line only and then decide is it alias or function after which
    # do appropriate transformation
    CMD_NAME=$(echo "$BLOCK" | tail -n1)
    if [[ $CMD_NAME == alias* ]]
    then
      CMD_NAME=$(echo "$CMD_NAME" | cut -d= -f1 | sed -E 's/^[[:space:]]*alias[[:space:]]+//')
    elif [[ $CMD_NAME == function* ]]
    then
      CMD_NAME=$(echo "$CMD_NAME" | sed -E 's/\(\).*//' | sed -E 's/^[[:space:]]*function[[:space:]]+//')
    fi

    # Get command description
    DESCRIPTION=$(echo "$BLOCK" | head -n-1 | sed 's/^##[[:space:]]*/    /')

    # Print final command help
    echo "  $CMD_NAME"
    echo "$DESCRIPTION"
    echo
  done
}

## Run this each time you want to commit new version of help. This boils down
## to 2 cases:
## 1. when you add new command with new description
## 2. when you update or add description to existing command
## usage: run `ockam.generate-help-markdown` then commit changes
function ockam.generate-help-markdown() {
  echo '```' > $CLI_DIR/HELP.md
  ockam.help >> $CLI_DIR/HELP.md
  echo '```' >> $CLI_DIR/HELP.md
}

## Set pipeline variable
## usage: ockam.pipeline-var <pipieline-name> <variable-command>
function ockam.pipeline-var() {
  _check_command az > /dev/null

  ORGANIZATION=https://dev.azure.com/$OCKAM_DEV_AZURE_ORGANIZATION/
  USAGE="Usage: ${FUNCNAME[0]} <pipieline-name> <variable-command>"

  if [ -z "$1" ]
  then
    _error_msg "Missing pipeline name"
    az pipelines list \
      --organization $ORGANIZATION \
      --project $OCKAM_DEV_AZURE_PROJECT | jq -r .[].name
    _error_msg "$USAGE"
    return
  else
    PIPELINE_NAME=$1
  fi

  if [ -z "$2" ]
  then
    _error_msg "Missing command"
    az pipelines variable -h
    _error_msg "$USAGE"
  else
    CMD=$2
    shift
    shift
    az pipelines variable $CMD \
      --organization $ORGANIZATION \
      --project $OCKAM_DEV_AZURE_PROJECT \
      --pipeline-name $PIPELINE_NAME $@
  fi
}


## Run pipeline
## usage: ockam.pipeline-run <pipieline-name> <git-branch>
function ockam.pipeline-run() {
  set -e
  _check_command git az > /dev/null
  USAGE="Usage: ${FUNCNAME[0]} <pipieline-name> <git-branch>"
  ORGANIZATION=https://dev.azure.com/$OCKAM_DEV_AZURE_ORGANIZATION/

  if [ -z "$1" ]
  then
    _error_msg "Missing pipeline name"
    az pipelines list \
      --organization $ORGANIZATION \
      --project $OCKAM_DEV_AZURE_PROJECT | jq -r .[].name
    _error_msg "$USAGE"
    return
  else
    PIPELINE_NAME=$1
  fi

  if [ -z "$2" ]
  then
    _error_msg "Missing branch name"
    _check_command git > /dev/null
    git branch
    _error_msg "$USAGE"
    return
  else
    BRANCH=$2
  fi

  BUILDNUMBER=$(az pipelines run \
    --name $PIPELINE_NAME \
    --branch $BRANCH \
    --organization $ORGANIZATION \
    --project $OCKAM_DEV_AZURE_PROJECT | jq .buildNumber)

  echo "Build number: $BUILDNUMBER triggered.."
}


## Set prefered website account storage access key
## usage: ockam.set.storage-key <account-name>
function ockam.set.storage-key() {
  USAGE="Usage: ${FUNCNAME[0]} <account-name>"

  if [ -z "$1" ]
  then
    _error_msg "Missing storage account name"
    for SA in $(az resource list --tag client=Ockam | jq -r .[].name);
    do
      _check_command az > /dev/null
      az storage account list -g ockam2$(echo $SA | cut -d'2' -f2 ) | jq .[].name;
    done
    _error_msg "$USAGE"
    return
  else
    ACCOUNT_NAME=$1
  fi
  # get current azure storage key
  export AZURE_STORAGE_KEY=$(az storage account keys list --account-name $ACCOUNT_NAME | jq -r .[0].value)
}

## If accidentally we left some of those setting then during creation of storage
## by terraform static-web module (using command az storage blob
## service-properties update) we will fail
function ockam.unset.envs() {
  unset AZURE_STORAGE_KEY
  unset AZURE_STORAGE_CONNECTION_STRING
  unset AZURE_STORAGE_SAS_TOKEN
}

## Check do we have all necessary CLI tools
function ockam.check-toolbelt() {
  _check_command terraform az jq
}

## Initialize project, usually you want to do it when you cloned the repo for
## the first time.
function ockam.init-project() {
  cd $OCKAM_REPO_DIR

  # git setup upstream repo
  _check_command git > /dev/null
  git remote add ockam git@github.com:ockam-network/website.git

  # copy and prepare main.tf
  cd terraform;
  cp main.tf.example main.tf
  TERRAFORM_ACCOUNT_STATE=ockam.show.terraform-account-name;
  sed -i 's#<STORAGE-ACCOUNT-NAME>#${TERRAFORM_ACCOUNT_STATE}#' main.tf

  echo 'info: Copy and setup cli.config'

  cd -
}

## Prints terraform account-name
function ockam.show.terraform-account-name() {
  _check_command az jq grep > /dev/null
  az storage account list | jq -r '.[].name' | grep --color=never terraform2website
}

## Set local ARM_ACCESS_KEY env variable so remote state can be accessed by
## Terraform
function ockam.set.state-key() {
  _check_command az > /dev/null
  TERRAFORM_ACCOUNT_STATE=ockam.show.terraform-account-name;
  export ARM_ACCESS_KEY=$(az storage account keys list --account-name TERRAFORM_ACCOUNT_STATE --query [0].value --output tsv)
}


# If storage account key for Terraform state is missing then load it
if [[ -z "${ARM_ACCESS_KEY}" ]];
then
  ockam.set.state-key
fi

## Wrapper for `terraform` command
function ockam.terraform() {
  if [ -z "$1" ]
  then
    _error_no_workspace
  else
    _check_command terraform > /dev/null
    ENV=$1
    shift
    cd $OCKAM_REPO_DIR/terraform && \
    terraform workspace select $ENV && \
    terraform init && \
    terraform $@ && cd - > /dev/null
  fi
}

## Wrapper for `terraform` command to run with appropriate environment
## (.tfvars) based on desirable workspace
##
## Example command:
## $ ockam.terraform.with-vars staging apply -auto-approve
##
## Executed command:
## $ cd to/terraform/dir
## $ terraform workspace select staging
## $ terraform staging apply -var-file=tfvars/staging.tfvars -auto-approve
function ockam.terraform.with-vars() { # staging/production COMMAND [param1,param2,..]
  if [ -z "$1" ]
  then
    _error_no_workspace
    return
  fi
  ENVIRONMENT=$1; shift

  if [ -z "$1" ]
  then
    _ockam_usage
    _error_msg "Missing terraform command"
    return
  fi
  CMD=$1; shift

  ockam.terraform $ENVIRONMENT $CMD -var-file=tfvars/$ENVIRONMENT.tfvars $@
}


ockam.unset.envs

cat <<THEEND
Ockam aliases loaded, try now type 'ockam<tab><tab>'
THEEND
